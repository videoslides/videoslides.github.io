{"version":3,"sources":["Header.js","actions/AddSlide.js","actions/types.js","SlidesPreview.js","actions/slideSelectionAction.js","SlideCreation.js","actions/ModifySlide.js","actions/RepositionSlide.js","Body.js","reducers/SlideReducer.js","reducers/slideSelectionReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","role","aria-label","AddSlide","dispatch","type","SlidesPreview","data","this","props","slides","map","row","i","key","current_slide","style","width","height","onClick","handleSlideSelection","src","image","Component","connect","state","slide","slideSelection","lastSlideUpdated","lastUpdateTime","slide_number","SlideCreation","caption","captionColor","handleImgUpload","bind","drawImage","document","getElementById","options","selectedIndex","duration","canvas","context","getContext","imageObj","Image","onload","font","fillStyle","fillText","event","setState","URL","createObjectURL","target","files","value","durationProp","onChange","id","placeholder","e","handleCaptionChange","ModifySlide","disabled","RepositionSlide","length","lastUpdate","slideNumber","error","isNaN","move","totalSlides","newPosition","parseInt","Body","flex","initialState","combineReducers","action","console","log","concat","JSON","parse","stringify","slide1","slide2","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAgBeA,MAZf,WACE,OACE,yBAAKC,UAAU,SAASC,KAAK,aAAaC,aAAW,mBACnD,yBAAKF,UAAU,gBACb,uBAAGA,UAAU,eAAb,oB,0CCNKG,EAAW,kBAAM,SAAAC,GAC1BA,EAAS,CACLC,KCJiB,gBCOnBC,E,iLAGM,IAAD,OAEHC,EAAOC,KAAKC,MAAMC,OAEtB,OACE,6BACE,yBAAKV,UAAU,WACXO,EAAMI,KAAI,SAACC,EAAKC,GAAN,OACV,6BACE,2BAAIA,GACJ,yBACEC,IAAG,eAAUD,GACbb,UAAS,qFACMa,GAAK,EAAKJ,MAAMM,cAAhB,cAAgD,MAC/DC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,QAAS,WAAQ,EAAKV,MAAMW,qBAAqBP,KAGjD,yBAAKQ,IAAK,EAAKZ,MAAMC,OAAOG,GAAGS,aAQrC,yCAEG,yBAAKtB,UAAU,4DACdgB,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,QAAS,WAAQ,EAAKV,MAAMN,aAE5B,yBAAKkB,IAAI,uF,GAnCKE,aAyDbC,eAPS,SAAAC,GAAK,MAAK,CAChCf,OAAQe,EAAMC,MAAMhB,OACpBK,cAAeU,EAAME,eAAeZ,cACpCa,iBAAkBH,EAAMC,MAAME,iBAC9BC,eAAgBJ,EAAMC,MAAMG,kBAGU,CAAET,qBC9DN,SAACU,GAAD,OAAkB,SAAA1B,GAClDA,EAAS,CACLC,KFDuB,kBEEvBqB,MAAOI,MD2DiD3B,YAAjDqB,CAA6DlB,G,iCExDtEyB,E,YACF,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDgB,MAAQ,CACTH,MAAO,GACPU,QAAS,GACTC,aAAc,SAGlB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBARR,E,iFAYf3B,KAAK4B,YACLC,SAASC,eAAe,YAAYC,QAAQC,cAAgBhC,KAAKC,MAAMC,OAAOF,KAAKC,MAAMM,eAAe0B,W,kCAG/F,IAAD,OACJC,EAASL,SAASC,eAAe,YACjCK,EAAUD,EAAOE,WAAW,MAC5BC,EAAW,IAAIC,MACnBD,EAASE,OAAS,WACdJ,EAAQP,UAAUS,EAAU,EAAG,EAAG,IAAK,KACvCF,EAAQK,KAAO,eACfL,EAAQM,UAAY,UACpBN,EAAQO,SAAS,EAAKzB,MAAMO,SAAW,EAAKvB,MAAMC,OAAO,EAAKD,MAAMM,eAAeiB,QAAS,GAAI,KAEpGa,EAASxB,IAAMb,KAAKiB,MAAMH,OAASd,KAAKC,MAAMC,OAAOF,KAAKC,MAAMM,eAAeO,MAC/EqB,EAAQP,UAAUS,EAAU,EAAG,EAAGA,EAAS5B,MAAO4B,EAAS3B,OACvD,EAAG,EAAGwB,EAAOzB,MAAOyB,EAAOxB,U,+EAGbiC,G,iFACZ3C,KAAK4C,SAAS,CAAE9B,MAAO+B,IAAIC,gBAAgBH,EAAMI,OAAOC,MAAM,M,OACpEhD,KAAK4B,Y,0LAGiBe,G,iFAChB3C,KAAK4C,SAAS,CAAEpB,QAASmB,EAAMI,OAAOE,Q,OAC5CjD,KAAK4B,Y,sIAGC,IAAD,SAEkC5B,KAAKC,MAAMC,OAAOF,KAAKC,MAAMM,eAA9DO,EAFD,EAECA,MAAqBU,GAFtB,EAEQ0B,aAFR,EAEsB1B,SAG3B,OACI,yBAAKhC,UAAU,WACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,MAAMgB,MAAO,CAAEE,OAAQ,UAElC,2BAAOlB,UAAU,uBAAjB,qBACA,6BACA,2BAAOK,KAAK,OAAOsD,SAAUnD,KAAK0B,gBAAiB0B,GAAG,cACtD,6BAAM,6BAEN,yBAAK5D,UAAU,SACX,2BAAOA,UAAU,uBAAjB,YACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,4BAAQ4D,GAAG,YACP,4CACA,6CACA,6CACA,iDAMhB,yBAAK5D,UAAU,SACX,2BAAOA,UAAU,uBAAjB,WACA,yBAAKA,UAAU,WACX,8BAAUA,UAAU,WAAW6D,YAAY,kCAAkCJ,MAAOjD,KAAKiB,MAAMO,SAAWA,EACtG2B,SAAU,SAACG,GAAQ,EAAKC,oBAAoBD,QAIxD,yBAAK9D,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQA,UAAU,iBACdmB,QAAS,kBACL,EAAKV,MAAMuD,YACN,EAAKvC,MAAMH,OAASA,EACrBe,SAASC,eAAe,YAAYC,QAAQC,cAC3C,EAAKf,MAAMO,SAAWA,EACvB,EAAKP,MAAMQ,aACX,EAAKxB,MAAMM,iBAPvB,WAWJ,yBAAKf,UAAU,WACX,4BAAQA,UAAU,iBAAiBiE,UAAQ,GAA3C,iBAEJ,yBAAKjE,UAAU,WACX,4BAAQA,UAAU,oBACdmB,QAAS,kBAAM,EAAKV,MAAMyD,gBAAgB,EAAKzD,MAAMM,eAAgB,EAAG,EAAKN,MAAMC,OAAOyD,UApD3G,MAuDS,yBAAKnE,UAAU,WACX,4BAAQA,UAAU,oBACdmB,QAAS,kBAAM,EAAKV,MAAMyD,gBAAgB,EAAKzD,MAAMM,cAAe,EAAG,EAAKN,MAAMC,OAAOyD,UAxDzG,SA+DJ,yBAAKnE,UAAU,kBACX,yBAAKA,UAAU,MAAMgB,MAAO,CAAEE,OAAQ,UAClC,2BAAOlB,UAAU,uBAAjB,iBACA,4BAAQ4D,GAAG,WAAW3C,MAAM,MAAMC,OAAO,e,GAhHrCK,aAgIbC,eANS,SAAAC,GAAK,MAAK,CAC9BV,cAAeU,EAAME,eAAeZ,cACpCL,OAAQe,EAAMC,MAAMhB,OACpB0D,WAAY3C,EAAMC,MAAM0C,cAGY,CAAEjE,WAAU6D,YCtIzB,SAAC1C,EAAOmB,EAAUT,EAASC,EAAcoC,GAAzC,OAAyD,SAAAjE,GAGhF,IAAIkE,GAAQ,GACRC,MAAM9B,IAAaA,EAAW,KAC9B6B,GAAQ,GAGZlE,EAAS,CACLC,KJVoB,eIWpBiB,MAAOA,EACPmB,SAAUA,EACVT,QAASA,EACTC,aAAcA,EACdoC,YAAaA,EACbC,MAAOA,MDuHkDJ,gBErIlC,SAACG,EAAaG,EAAMC,GAApB,OAAoC,SAAArE,GAE/D,IAAIsE,EAAcL,EAAcM,SAASH,GAErCE,EAAc,GAAKA,GAAeD,GAA+B,IAAhBA,IAKrDrE,EAAS,CACLC,KLXwB,mBKYxBgE,YAAaA,EACbK,YAAaA,IAIjBtE,EAAS,CACLC,KLjBuB,kBKkBvBqB,MAAOgD,QFmHAlD,CAAqEO,GGhI9E6C,E,iLAEF,OACE,yBAAK5E,UAAU,wBAAwBgB,MAAO,CAAE6D,KAAM,IAEpD,kBAAC,EAAD,MACA,6BACA,2BAAO7E,UAAU,2BAAjB,mBAA4DQ,KAAKC,MAAMM,eACvE,6BACA,kBAAC,EAAD,CAAeD,IAAKN,KAAKC,MAAMM,gBAC/B,4BAAQf,UAAU,2BAA2BiE,UAAQ,GAArD,uB,GAVW1C,aAqBJC,eAJS,SAAAC,GAAK,MAAK,CAChCV,cAAeU,EAAME,eAAeZ,iBAGE,GAAzBS,CAA6BoD,G,glBC3B5C,IAAME,EAAe,CACjBpE,OAAQ,CAAC,CACLY,MAAO,GACPmB,SAAU,EACVT,QAAS,GACTC,aAAc,QACdqC,OAAO,K,yjBCNf,IAAMQ,EAAe,CACjB/D,cAAe,GCCJgE,cAAgB,CAC3BrD,MFOW,WAAyC,IAChDhB,EADiBe,EAA8B,uDAAtBqD,EAAcE,EAAQ,uCAEnD,OAAQA,EAAO3E,MAGX,IPjBiB,YOkBb,IAAMqB,EAAQ,CACVJ,MAAO,GACPmB,SAAU,EACVT,QAAS,GACTC,aAAc,QACdqC,OAAO,GAGX,OADAW,QAAQC,IAAKzD,EAAMf,OAAQyE,OAAOzD,IAC3B,EAAP,GACOD,EADP,CAEIf,OAASe,EAAMf,OAAQyE,OAAOzD,KAItC,IP/BoB,eOyChB,OARAhB,EAAS0E,KAAKC,MAAMD,KAAKE,UAAU7D,EAAMf,UAClCsE,EAAOX,aAAe,CACzB/C,MAAO0D,EAAO1D,MACdmB,SAAUuC,EAAOvC,SACjBT,QAASgD,EAAOhD,QAChBC,aAAc+C,EAAO/C,aACrBqC,MAAOU,EAAOV,OAEX,EAAP,GACO7C,EADP,CAEIf,OAAQA,IAIhB,IP9CwB,mBOgDpBA,EAAS0E,KAAKC,MAAMD,KAAKE,UAAU7D,EAAMf,SACzCuE,QAAQC,IAAIxE,GACZ,IAAI6E,EAAU7E,EAAOsE,EAAOX,aACxBmB,EAAU9E,EAAOsE,EAAON,aAI5B,OAHAhE,EAAOsE,EAAON,aAAea,EAC7B7E,EAAOsE,EAAOX,aAAemB,EAC7BP,QAAQC,IAAIxE,GACL,EAAP,GACOe,EADP,CAEIf,OAAQA,IAGhB,QACI,OAAO,EAAP,GACOe,KE1DfE,eDAW,WAAyC,IAA/BF,EAA8B,uDAAtBqD,EAAcE,EAAQ,uCACnD,OAAQA,EAAO3E,MAEX,IRNuB,kBQOnB,OAAO,KACAoB,EADP,CAEIV,cAAeiE,EAAOtD,QAG9B,QACI,OAAOD,MEVbgE,EAAa,CAACC,KAULC,EARDC,YACVC,EALiB,GAOjBC,YACIC,IAAe,WAAf,EAAmBN,KCSZO,MAXf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,yBAAK3F,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlE,SAASC,eAAe,SD2H3C,kBAAmBkE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.026d2c99.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nfunction Header() {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\" >\n      <div className=\"navbar-brand\">\n        <p className=\"navbar-item\">\n          Slideshow App\n      </p>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import { ADD_SLIDE } from './types'\r\n\r\nexport const AddSlide = () => dispatch => {\r\n    dispatch({\r\n        type: ADD_SLIDE,\r\n    })\r\n}\r\n","export const ADD_SLIDE = 'ADD_SLIDE'\r\nexport const MODIFY_SLIDE = 'MODIFY_SLIDE'\r\nexport const REPOSITION_SLIDE = 'REPOSITION_SLIDE'\r\nexport const SLIDE_SELECTION = 'SLIDE_SELECTION'\r\nexport const SLIDE_EXCEED_BOUNDARIES = 'SLIDE_EXCEED_BOUNDARIES'\r\n","import React, { Component } from 'react';\r\n\r\n\r\nimport { connect } from 'react-redux'\r\nimport { handleSlideSelection } from './actions/slideSelectionAction'\r\nimport { AddSlide } from './actions/AddSlide'\r\n\r\nclass SlidesPreview extends Component {\r\n\r\n\r\n  render() {\r\n\r\n    let data = this.props.slides\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"is-flex\">\r\n          {(data).map((row, i) => (\r\n            <div>\r\n              <p>{i}</p>\r\n              <div\r\n                key={`slide${i}`}\r\n                className={`has-text-centered clickableBox box paddedBox\r\n                             ${i == this.props.current_slide ? `selectedBox` : null}`}\r\n                style={{ width: \"100px\", height: \"100px\" }}\r\n                onClick={() => { this.props.handleSlideSelection(i) }}>\r\n\r\n\r\n                <img src={this.props.slides[i].image} />\r\n\r\n\r\n              </div>\r\n            </div>\r\n\r\n          ))}\r\n\r\n          <div>\r\n            Add Slide\r\n             <div className=\"has-text-centered clickableBox box paddedBox is-vcentered\"\r\n              style={{ width: \"100px\", height: \"100px\" }}\r\n              onClick={() => { this.props.AddSlide() }}>\r\n\r\n              <img src=\"https://cdn3.iconfinder.com/data/icons/ui-icons-5/16/plus-small-01-512.png\" />\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  slides: state.slide.slides,\r\n  current_slide: state.slideSelection.current_slide,\r\n  lastSlideUpdated: state.slide.lastSlideUpdated,\r\n  lastUpdateTime: state.slide.lastUpdateTime\r\n})\r\n\r\nexport default connect(mapStateToProps, { handleSlideSelection, AddSlide })(SlidesPreview);","import { SLIDE_SELECTION } from './types'\r\n\r\nexport const handleSlideSelection = (slide_number) => dispatch =>{\r\n    dispatch({\r\n        type: SLIDE_SELECTION,\r\n        slide: slide_number\r\n    })\r\n}\r\n        ","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { AddSlide } from './actions/AddSlide'\r\nimport { ModifySlide } from './actions/ModifySlide'\r\nimport { RepositionSlide } from './actions/RepositionSlide'\r\n\r\nclass SlideCreation extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            image: '',\r\n            caption: '',\r\n            captionColor: 'black'\r\n        }\r\n\r\n        this.handleImgUpload = this.handleImgUpload.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawImage()\r\n        document.getElementById(\"duration\").options.selectedIndex = this.props.slides[this.props.current_slide].duration\r\n    }\r\n\r\n    drawImage() {\r\n        var canvas = document.getElementById(\"myCanvas\");\r\n        var context = canvas.getContext(\"2d\");\r\n        var imageObj = new Image();\r\n        imageObj.onload = () => {\r\n            context.drawImage(imageObj, 0, 0, 400, 300);\r\n            context.font = \"20pt Calibri\";\r\n            context.fillStyle = \"#ffffff\";\r\n            context.fillText(this.state.caption || this.props.slides[this.props.current_slide].caption, 20, 20);\r\n        };\r\n        imageObj.src = this.state.image || this.props.slides[this.props.current_slide].image;\r\n        context.drawImage(imageObj, 0, 0, imageObj.width, imageObj.height,\r\n            0, 0, canvas.width, canvas.height)\r\n    }\r\n\r\n    async handleImgUpload(event) {\r\n        await this.setState({ image: URL.createObjectURL(event.target.files[0]) });\r\n        this.drawImage()\r\n    };\r\n\r\n    async handleCaptionChange(event) {\r\n        await this.setState({ caption: event.target.value })\r\n        this.drawImage()\r\n    }\r\n\r\n    render() {\r\n\r\n        let { image, durationProp, caption } = this.props.slides[this.props.current_slide]\r\n        let left = '<'\r\n        let right = '>'\r\n        return (\r\n            <div className=\"columns\">\r\n                <div className=\"column is-half\">\r\n                    <div className=\"box\" style={{ height: \"420px\" }}>\r\n\r\n                        <label className=\"label has-text-left\">Upload image file</label>\r\n                        <br />\r\n                        <input type=\"file\" onChange={this.handleImgUpload} id=\"imgupload\" />\r\n                        <br /><br />\r\n\r\n                        <div className=\"field\">\r\n                            <label className=\"label has-text-left\">Duration</label>\r\n                            <div className=\"control\">\r\n                                <div className=\"select\">\r\n                                    <select id=\"duration\">\r\n                                        <option>1 second</option>\r\n                                        <option>2 seconds</option>\r\n                                        <option>3 seconds</option>\r\n                                        <option>4 seconds</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label className=\"label has-text-left\">Caption</label>\r\n                            <div className=\"control\">\r\n                                <textarea className=\"textarea\" placeholder=\"Add a caption for current slide\" value={this.state.caption || caption}\r\n                                    onChange={(e) => { this.handleCaptionChange(e) }}></textarea>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"field is-grouped\">\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-link\"\r\n                                    onClick={() =>\r\n                                        this.props.ModifySlide(\r\n                                            (this.state.image || image),\r\n                                            document.getElementById(\"duration\").options.selectedIndex,\r\n                                            (this.state.caption || caption),\r\n                                            this.state.captionColor,\r\n                                            this.props.current_slide)\r\n                                    }>\r\n                                    Submit</button>\r\n                            </div>\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-link\" disabled>Delete Slide</button>\r\n                            </div>\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-success\"\r\n                                    onClick={() => this.props.RepositionSlide(this.props.current_slide, -1, this.props.slides.length)}>\r\n                                    {left}</button>\r\n                            </div>\r\n                            <div className=\"control\">\r\n                                <button className=\"button is-success\"\r\n                                    onClick={() => this.props.RepositionSlide(this.props.current_slide, 1, this.props.slides.length)}>\r\n                                    {right}</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"column is-half\">\r\n                    <div className=\"box\" style={{ height: \"420px\" }}>\r\n                        <label className=\"label has-text-left\">Image Preview</label>\r\n                        <canvas id=\"myCanvas\" width=\"400\" height=\"300\"></canvas>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    current_slide: state.slideSelection.current_slide,\r\n    slides: state.slide.slides,\r\n    lastUpdate: state.slide.lastUpdate\r\n})\r\n\r\nexport default connect(mapStateToProps, { AddSlide, ModifySlide, RepositionSlide })(SlideCreation);\r\n","import { MODIFY_SLIDE } from './types'\r\n\r\nexport const ModifySlide = (image, duration, caption, captionColor, slideNumber) => dispatch => {\r\n\r\n    //Perform all error checking here. Eg empty captions, invalid duration\r\n    let error = false\r\n    if (isNaN(duration) || duration < 1) {\r\n        error = true\r\n    }\r\n\r\n    dispatch({\r\n        type: MODIFY_SLIDE,\r\n        image: image,\r\n        duration: duration,\r\n        caption: caption,\r\n        captionColor: captionColor,\r\n        slideNumber: slideNumber,\r\n        error: error\r\n    })\r\n}\r\n","import { REPOSITION_SLIDE, SLIDE_EXCEED_BOUNDARIES } from './types'\r\nimport { SLIDE_SELECTION } from './types'\r\n\r\nexport const RepositionSlide = (slideNumber, move, totalSlides) => dispatch => {\r\n\r\n    let newPosition = slideNumber + parseInt(move)\r\n\r\n    if (newPosition < 0 || newPosition >= totalSlides || totalSlides === 1) {\r\n        return\r\n        //To inform user of invalid repositioning, use action SLIDE_EXCEED_BOUNDARIES and add error msg\r\n    }\r\n\r\n    dispatch({\r\n        type: REPOSITION_SLIDE,\r\n        slideNumber: slideNumber,\r\n        newPosition: newPosition\r\n    })\r\n\r\n    //Ensure current slide selection is updated to the new slide's position\r\n    dispatch({\r\n        type: SLIDE_SELECTION,\r\n        slide: newPosition\r\n    })\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport SlidesPreview from './SlidesPreview'\nimport SlideCreation from './SlideCreation'\n\nimport { connect } from 'react-redux'\n\nclass Body extends Component {\n  render() {\n    return (\n      <div className=\"container is-centered\" style={{ flex: 1 }}>\n\n        <SlidesPreview />\n        <br />\n        <label className=\"label has-text-centered\">Modifying Slide {this.props.current_slide}</label>\n        <br />\n        <SlideCreation key={this.props.current_slide} />\n        <button className=\"button is-medium is-link\" disabled>Generate Video</button>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  current_slide: state.slideSelection.current_slide,\n})\n\nexport default connect(mapStateToProps, {})(Body);\n","import { ADD_SLIDE, MODIFY_SLIDE, REPOSITION_SLIDE } from '../actions/types'\r\n\r\nconst initialState = {\r\n    slides: [{\r\n        image: '',\r\n        duration: 0,\r\n        caption: '',\r\n        captionColor: 'black',\r\n        error: true\r\n    }]\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    let slides\r\n    switch (action.type) {\r\n\r\n        //Add an empty slide when users click the + button\r\n        case ADD_SLIDE:\r\n            const slide = {\r\n                image: '',\r\n                duration: 0,\r\n                caption: '',\r\n                captionColor: 'black',\r\n                error: true\r\n            }\r\n            console.log((state.slides).concat(slide))\r\n            return {\r\n                ...state,\r\n                slides: (state.slides).concat(slide)\r\n            }\r\n\r\n        //Modify current slide when user clicks \"Submit\" button\r\n        case MODIFY_SLIDE:\r\n            //Perform deep copy to change object reference\r\n            slides = JSON.parse(JSON.stringify(state.slides));\r\n            slides[action.slideNumber] = {\r\n                image: action.image,\r\n                duration: action.duration,\r\n                caption: action.caption,\r\n                captionColor: action.captionColor,\r\n                error: action.error,\r\n            }\r\n            return {\r\n                ...state,\r\n                slides: slides\r\n            }\r\n\r\n        //Modify current slide when user clicks \"Submit\" button\r\n        case REPOSITION_SLIDE:\r\n            //Perform deep copy to change object reference\r\n            slides = JSON.parse(JSON.stringify(state.slides));\r\n            console.log(slides)\r\n            let slide1 = (slides[action.slideNumber])\r\n            let slide2 = (slides[action.newPosition])\r\n            slides[action.newPosition] = slide1\r\n            slides[action.slideNumber] = slide2\r\n            console.log(slides)\r\n            return {\r\n                ...state,\r\n                slides: slides\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}","import { SLIDE_SELECTION } from '../actions/types'\r\n\r\nconst initialState = {\r\n    current_slide: 0\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case SLIDE_SELECTION:\r\n            return {\r\n                ...state,\r\n                current_slide: action.slide\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport SlideReducer from './SlideReducer'\r\nimport slideSelectionReducer from './slideSelectionReducer';\r\n\r\nexport default combineReducers({\r\n    slide: SlideReducer,\r\n    slideSelection: slideSelectionReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n    )\r\n)\r\n\r\nexport default store;","import React from 'react';\n\nimport './App.css';\nimport Header from './Header.js'\nimport Body from './Body.js'\n\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <Body />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}